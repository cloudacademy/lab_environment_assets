###############################################################################
#
# Complete this compose file by adding the necessary service configurations.
# Details are provided in the `TODO` comments.
###############################################################################
volumes:
    # Persistent data for the postgres service.
    pg_data_volume:

networks:
    # Connects the web_app and postgres services.
    web_to_db:
    # Connects the proxy and web_app services. 
    # The proxy has no direct connection to the database.
    proxy_to_web:

# Use secrets to configure database connection details.
secrets:
    db_user:
        file: overshare/secrets/db_user.txt
    db_pass:
        file: overshare/secrets/db_pass.txt
    db_name:
        file: overshare/secrets/db_name.txt


# Database connection secrets fragment.
# Applies to all of the services except the proxy.
x-db_creds: &db_creds
    - source: db_user
      target: /secrets/db_user
      mode: 0440
    - source: db_pass
      target: /secrets/db_pass
      mode: 0440
    - source: db_name
      target: /secrets/db_name
      mode: 0440

# Database connection environment variables fragment.
# Reusable ENV variables for the web_app and db_init services
x-db_env: &db_env
    - DATABASE_USER=/secrets/db_user
    - DATABASE_PASS=/secrets/db_pass
    - DATABASE_NAME=/secrets/db_name
    - DATABASE_HOST=postgres


services:

    # TODO: Complete the postgres service definition.
    #
    # Tasks:
    # 
    # 1. Mount the volume:
    #    |> pg_data_volume
    #    |> @ 
    #    |> /var/lib/postgresql/data.
    #
    # 2. Add the x-db_creds fragment to the secrets section.
    #
    # 3. Attach the web_to_db network.
    #
    # 4. Add a healthcheck that runs "pg_isready" every 3 seconds with 5 retries.
    #    |>
    #    |> Test: 
    #    |> pg_isready -U "$(cat /secrets/db_user)" -d "$(cat /secrets/db_name)" -h postgres
    postgres:
        image: postgres:15-alpine
        command: "-c shared_buffers=256MB -c max_connections=200"
        restart: unless-stopped
        environment:
            - POSTGRES_USER_FILE=/secrets/db_user
            - POSTGRES_PASSWORD_FILE=/secrets/db_pass
            - POSTGRES_DB_FILE=/secrets/db_name


    # TODO: Complete the db_init service definition.
    #
    # Tasks:
    #
    # 1. Add the x-db_creds fragment to the secrets section.
    #
    # 2. Attach the web_to_db network.
    #
    # 3. Add the x-db_env fragment to the environment section.
    #
    # 4. Add dependency on the postgres service being healthy.
    db_init:
        build: overshare/web_app/
        command: python3 /code/app.py
        restart: "no"
        


    # TODO: Complete the web_app service definition.
    #
    # Tasks:
    #
    # 1. Add the x-db_creds fragment to the secrets section.
    #
    # 2. Attach the web_to_db and proxy_to_web networks.
    #
    # 3. Add the x-db_env fragment to the environment section.
    #
    # 4. Add dependency on the postgres service being healthy.
    #
    # 5. Add a healthcheck that checks the status of the web application 
    #    |> every 3 seconds with 5 retries, starting 15 seconds after startup.
    #    |>
    #    |> Test: 
    #    |> wget -T 5 "http://web_app:9000/" -O /dev/null -q
    web_app: 
        build:
            context: overshare/web_app/
        restart: unless-stopped
        

    # TODO: Complete the proxy service definition.
    #
    # Tasks:
    #
    # 1. Attach the proxy_to_web network.
    #
    # 2. Mount the file:
    #    |> /home/ec2-user/challenge_3/overshare/web_proxy/default.conf.template 
    #    |> @
    #    |> /etc/nginx/templates/default.conf.template
    #
    # 3. Add dependency on the web_app service being healthy.
    proxy:
        image: nginx:1.27-alpine
        restart: unless-stopped
        ports:
            - "5000:80"
        environment:
            - WEB_APP_HOST=web_app
            - WEB_APP_PORT=9000